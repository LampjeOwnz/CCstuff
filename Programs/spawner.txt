-- Version Information
-- Spawner
prgrVersion = "0.5"
m = peripheral.wrap("top")

function downloadAPI()
	print("Updating...")
	sleep(1)
 
	request = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/button.txt")
	data = request.readAll()
 
	if fs.exists("button") then
		fs.delete("button")
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	else
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	end
 
	print("Update complete.")
	sleep(1)
	term.clear()
	term.setCursorPos(1,1)
	print("Portal program started.")
end

function checkAPI()
	print("Checking for API")
	sleep(1)
	if fs.exists("button") then
		os.unloadAPI("button")
		os.loadAPI("button")
 
		clientVersion = button.version()
 
		versionRequest = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/Buttonversion.txt")
		serverVersion = versionRequest.readAll()
 
		if serverVersion == clientVersion then
			print("You have the newest version of the API.")
			sleep(1)
			term.clear()
			term.setCursorPos(1,1)
			print("Spawner program started.")
		else
			print("Current version: "..clientVersion..".")
			print("Version: "..serverVersion.." is now available. \nWould you like to update?")
			print("Type in: Yes To Update the Button API.")
   
			input = read()
   
			if string.lower(input) == "yes" then
				downloadAPI()
			else
				print("Update canceled.")
				print("Try again.")
				sleep(2)
				checkAPI()
			end
		end
	else
		downloadAPI()
	end
end

checkAPI()

os.loadAPI("button")
button.setMon("top")

function Resetcable()
	rs.setBundledOutput("bottom", 0)
end

Resetcable()

-- Redstone functions
function redstone(cabstate, cabcolor)
	if (cabstate == false) then
		out = rs.getBundledOutput("bottom")
		rs.setBundledOutput("bottom", (out + cabcolor))
	elseif (cabstate == true) then
		out = rs.getBundledOutput("bottom")
		rs.setBundledOutput("bottom", (out - cabcolor))
   end
end	

-- Making the button for the monitor + executing state function.
function knoppen()
	-- A Button
	--		Button name,  The label,  Mode,   x1 y1 x2 y2, First col, sec color,   text color,   Function to do.
	button.add("Abutton", "White", "toggle", 2, 2, 8, 4, colors.red, colors.white, colors.black, 
	function ()
		print("White touched")
		astate = button.getState("Abutton")
		local color = colors.white
		redstone(astate, color)
		button.draw()
	end)
	button.setState("Abutton", true)
	--button.flashtime(Atime)
	
	-- B button
	button.add("Bbutton", "Orange", "toggle", 2, 6, 9, 8, colors.red, colors.orange, colors.black, 
	function ()
		print("Orange touched")
		bstate = button.getState("Bbutton")
		local color = colors.orange
		redstone(bstate, color)
		button.draw()
	end)
	button.setState("Bbutton", true)
	-- C button
	button.add("Cbutton", "Magenta", "toggle", 2, 10, 10, 12, colors.red, colors.magenta, colors.black, 
	function ()
		print("Magenta touched")
		cstate = button.getState("Cbutton")
		local color = colors.magenta
		redstone(cstate, color)
		button.draw()
	end)
	button.setState("Cbutton", true)
	
	-- D button
	button.add("Dbutton", "Light blue", "toggle", 2, 14, 13, 16, colors.red, colors.lightBlue, colors.black, 
	function ()
		print("Light blue touched")
		dstate = button.getState("Dbutton")
		local color = colors.lightBlue
		redstone(dstate, color)
		button.draw()
	end)
	button.setState("Dbutton", true)
	
	-- AE button
	button.add("Ebutton", "Yellow", "toggle", 13, 2, 20, 4, colors.red, colors.yellow, colors.black, 
	function ()
		print("Yellow touched")
		estate = button.getState("Ebutton")
		local color = colors.yellow
		redstone(estate, color)
		button.draw()
	end)
	button.setState("Ebutton", true)

	button.draw()
end

knoppen()

while true do
	button.check()
end