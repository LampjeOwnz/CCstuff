-- Version Information
-- Portal Program
prgrVersion = "0.7"
m = peripheral.wrap("top")
rednet.open("right")

local turtID = 668

function downloadAPI()
	print("Updating...")
	sleep(1)
 
	request = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/button.txt")
	data = request.readAll()
 
	if fs.exists("button") then
		fs.delete("button")
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	else
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	end
 
	print("Update complete.")
	sleep(1)
	term.clear()
	term.setCursorPos(1,1)
	print("Portal program started.")
end

function checkAPI()
	print("Checking for API")
	sleep(1)
	if fs.exists("button") then
		os.unloadAPI("button")
		os.loadAPI("button")
 
		clientVersion = button.version()
 
		versionRequest = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/APIversions.txt")
		versionRequest.readLine()
		line = versionRequest.readLine()
		serverVersion = line	
		
		if serverVersion == clientVersion then
			print("You have the newest version of the API.")
			sleep(1)
			term.clear()
			term.setCursorPos(1,1)
			print("Portal program started.")
		else
			print("Current version: "..clientVersion..".")
			print("Version: "..serverVersion.." is now available. \nWould you like to update?")
			print("Type in: Yes To Update the Button API.")
   
			input = read()
   
			if string.lower(input) == "yes" then
				downloadAPI()
			else
				print("Update canceled.")
				print("Try again.")
				sleep(2)
				checkAPI()
			end
		end
	else
		downloadAPI()
	end
end

checkAPI()

os.loadAPI("button")
button.setMon("top")

function Resetcable()
	rs.setBundledOutput("bottom", colors.white)
end

Resetcable()

function Resetmonitor()
	--sleep(5)
	button.setState("Abutton", true)
	button.setState("Bbutton", true)
	button.setState("Cbutton", true)
	button.setState("Dbutton", true)
	button.setState("Ebutton", true)
	button.setState("Fbutton", true)
	rs.setBundledOutput("bottom", colors.white)
	button.draw()
end

function take()
	sleep(5)
	rednet.send(turtID, "mback")
	rednet.receive()
	rs.setBundledOutput("bottom", colors.black + colors.white)
	sleep(1)
	rednet.send(turtID, "mforward")
	rednet.receive()
	sleep(5)
end

-- Redstone functions
function redstone()
	astate = button.getState("Abutton")
	bstate = button.getState("Bbutton")
	cstate = button.getState("Cbutton")
	dstate = button.getState("Dbutton")
	estate = button.getState("Ebutton")
	fstate = button.getState("Fbutton")
	if astate == false then
		rednet.send(turtID, "netherbook")
		rednet.receive()
		take()
	end
	if bstate == false then
		rednet.send(turtID, "theendbook")
		rednet.receive()
		take()
	end
	if cstate == false then
		rednet.send(turtID, "miningagebook")
		rednet.receive()
		take()
	end
	if dstate == false then
		rednet.send(turtID, "oilfieldbook")
		rednet.receive()
		take()
	end
	if estate == false then
		rednet.send(turtID, "lavabook")
		rednet.receive()
		take()
	end
	if fstate == false then
		rednet.send(turtID, "spawnbook")
		rednet.receive()
		take()
	end
	--if estate == false then
	--	rs.setBundledOutput("bottom", colors.white + colors.lime)
	--	take()
	--end
	Resetmonitor()
end	

-- Making the button for the monitor + executing state function.
function knoppen()
	-- A Button
	button.add("Abutton", "Nether", "toggle", 2, 2, 11, 4, colors.red, colors.lime, colors.white, 
	function ()
		print("Nether touched")
		redstone()
		button.draw()
	end)
	button.setState("Abutton", true)
	
	-- B button
	button.add("Bbutton", "The End", "toggle", 2, 6, 10, 8, colors.lightGray, colors.lime, colors.white, 
	function ()
		print("The End touched")
		redstone()
		button.draw()
	end)
	button.setState("Bbutton", true)
	
	-- C button
	button.add("Cbutton", "Mining Age", "toggle", 2, 10, 14, 12, colors.green, colors.lime, colors.white, 
	function ()
		print("Mining Age touched")
		redstone()
		button.draw()
	end)
	button.setState("Cbutton", true)
	
	-- D button
	button.add("Dbutton", "Oilfield", "toggle", 2, 14, 11, 16, colors.gray, colors.lime, colors.white, 
	function ()
		print("Oilfield touched")
		redstone()
		button.draw()
	end)
	button.setState("Dbutton", true)
	
	-- E button
	button.add("Ebutton", "Lava Age", "toggle", 16, 2, 25, 4, colors.red, colors.lime, colors.white, 
	function ()
		print("Lava Age touched")
		redstone()
		button.draw()
	end)
	button.setState("Ebutton", true)
	
	-- F button
	button.add("Fbutton", "Spawn", "toggle", 16, 6, 22, 8, colors.lightGray, colors.lime, colors.white, 
	function ()
		print("Spawn touched")
		redstone()
		button.draw()
	end)
	button.setState("Fbutton", true)

	button.draw()
end

knoppen()

while true do
	button.check()
end