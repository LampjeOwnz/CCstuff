-- Version Information
prgrVersion = "0.6"
m = peripheral.wrap("right")
Atime = 1

function downloadAPI()
	print("Updating...")
	sleep(1)
 
	request = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/button.txt")
	data = request.readAll()
 
	if fs.exists("button") then
		fs.delete("button")
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	else
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	end
 
	print("Update complete.")
	sleep(1)
	term.clear()
	term.setCursorPos(1,1)
	print("Portal program started.")
end

function checkAPI()
	print("Checking for API")
	sleep(1)
	if fs.exists("button") then
		os.unloadAPI("button")
		os.loadAPI("button")
 
		clientVersion = button.version()
 
		versionRequest = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/Buttonversion.txt")
		serverVersion = versionRequest.readAll()
 
		if serverVersion == clientVersion then
			print("You have the newest version of the API.")
			sleep(2)
			term.clear()
			term.setCursorPos(1,1)
			print("Portal program started.")
		else
			print("Current version: "..clientVersion..".")
			print("Version: "..serverVersion.." is now available. \nWould you like to update?")
			print("Type in: Yes To Update the Button API.")
   
			input = read()
   
			if string.lower(input) == "yes" then
				downloadAPI()
			else
				print("Update canceled.")
				print("Try again.")
				sleep(2)
				checkAPI()
			end
		end
	else
		downloadAPI()
	end
end

checkAPI()

os.loadAPI("button")
button.setMon("right")

function Resetcable()
	rs.setBundledOutput("back", colors.white)
end

Resetcable()

function Resetmonitor()
	sleep(5)
	button.setState("Abutton", true)
	button.setState("Bbutton", true)
	button.setState("Cbutton", true)
	button.setState("Dbutton", true)
	button.setState("Ebutton", true)
	rs.setBundledOutput("back", colors.white)
	button.draw()
end

-- Redstone functions
function redstone()
	astate = button.getState("Abutton")
	bstate = button.getState("Bbutton")
	cstate = button.getState("Cbutton")
	dstate = button.getState("Dbutton")
	estate = button.getState("Ebutton")
	if astate == false then
		rs.setBundledOutput("back", colors.white + colors.orange)
	end
	if bstate == false then
		rs.setBundledOutput("back", colors.white + colors.magenta)
	end
	if cstate == false then
		rs.setBundledOutput("back", colors.white + colors.lightBlue)
	end
	if dstate == false then
		rs.setBundledOutput("back", colors.white + colors.yellow)
	end
	if estate == false then
		rs.setBundledOutput("back", colors.white + colors.lime)
	end
	Resetmonitor()
end	

-- Making the button for the monitor + executing state function.
function knoppen()
	-- A Button
	button.add("Abutton", "Left A", "toggle", 2, 2, 9, 4, colors.red, colors.lime, colors.white, 
	function ()
		print("Left A touched")
		redstone()
		button.draw()
	end)
	button.setState("Abutton", true)
	--button.flashtime(Atime)
	
	-- B button
	button.add("Bbutton", "Left B", "toggle", 2, 6, 9, 8, colors.red, colors.lime, colors.white, 
	function ()
		print("Left B touched")
		redstone()
		button.draw()
	end)
	button.setState("Bbutton", true)
	
	-- C button
	button.add("Cbutton", "Right A", "toggle", 2, 10, 10, 12, colors.red, colors.lime, colors.white, 
	function ()
		print("Right A touched")
		redstone()
		button.draw()
	end)
	button.setState("Cbutton", true)
	
	-- D button
	button.add("Dbutton", "Right B", "toggle", 2, 14, 10, 16, colors.red, colors.lime, colors.white, 
	function ()
		print("Right B touched")
		redstone()
		button.draw()
	end)
	button.setState("Dbutton", true)
	
	-- AE button
	button.add("Ebutton", "AE Portal", "toggle", 13, 2, 23, 4, colors.red, colors.lime, colors.white, 
	function ()
		print("AE portal touched")
		redstone()
		button.draw()
	end)
	button.setState("Ebutton", true)

	button.draw()
end

knoppen()

while true do
	button.check()
end