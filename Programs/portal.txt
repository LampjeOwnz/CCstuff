-- Version Information
prgrVersion = 0.5
m = peripheral.wrap("right")
Atime = 1

function downloadAPI()
	print("Updating...")
	sleep(1)
 
	request = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/button.txt")
	data = request.readAll()
 
	if fs.exists("button") then
		fs.delete("button")
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	else
		file = fs.open("button", "w")
		file.write(data)
		file.close()
	end
 
	print("Update complete.")
	sleep(1)
	term.clear()
	term.setCursorPos(1,1)
	print("Portal program started.")
end

function checkAPI()
	print("Checking for API")
	sleep(1)
	if fs.exists("button") then
		os.unloadAPI("button")
		os.loadAPI("button")
 
		clientVersion = button.version()
 
		versionRequest = http.get("https://raw.github.com/LampjeOwnz/CCstuff/master/APIs/Buttonversion.txt")
		serverVersion = versionRequest.readAll()
 
		if serverVersion == clientVersion then
			print("You have the newest version of the API.")
			term.clear()
			term.setCursorPos(1,1)
			print("Portal program started.")
		else
			print("Version "..serverVersion.." is now available. Would you like to update?")
   
			input = read()
   
			if string.lower(input) == "yes" then
				downloadAPI()
			else
				print("Update canceled.")
				print("Try again.")
				sleep(2)
				checkAPI()
			end
		end
	else
		downloadAPI()
	end
end

checkAPI()

os.loadAPI("button")
button.setMon("right")

function Resetcable()
	rs.setBundledOutput("back", colors.white)
end

Resetcable()

function Resetmonitor()
	sleep(5)
	button.setState("Abutton", true)
	button.setState("Bbutton", true)
	button.setState("Cbutton", true)
	button.setState("Dbutton", true)
	button.setState("Ebutton", true)
	rs.setBundledOutput("back", colors.white)
	button.draw()
end

-- Redstone functions
function redstone()
	astate = button.getState("Abutton")
	bstate = button.getState("Bbutton")
	cstate = button.getState("Cbutton")
	dstate = button.getState("Dbutton")
	estate = button.getState("Ebutton")
	if astate == false then
		rs.setBundledOutput("back", colors.white + colors.orange)
	end
	if bstate == false then
		rs.setBundledOutput("back", colors.white + colors.magenta)
	end
	if cstate == false then
		rs.setBundledOutput("back", colors.white + colors.lightBlue)
	end
	if dstate == false then
		rs.setBundledOutput("back", colors.white + colors.yellow)
	end
	if estate == false then
		rs.setBundledOutput("back", colors.white + colors.lime)
	end
	Resetmonitor()
end	


-- The other button states (and colors)
function Aknop()
	astate = button.getState("Abutton")
	if astate == false then
		button.setState("Bbutton", true)
		button.setState("Cbutton", true)
		button.setState("Dbutton", true)
		button.setState("Ebutton", true)
	end
	redstone()
	button.draw()
	print("Left A pressed")
end
	
function Bknop()
	bstate = button.getState("Bbutton")
	if bstate == false then
		button.setState("Abutton", true)
		button.setState("Cbutton", true)
		button.setState("Dbutton", true)
		button.setState("Ebutton", true)
	end
	redstone()
	button.draw()
	print("Left B pressed")
end

function Cknop()
	cstate = button.getState("Cbutton")
	if cstate == false then
		button.setState("Abutton", true)
		button.setState("Bbutton", true)
		button.setState("Dbutton", true)
		button.setState("Ebutton", true)
		
	end
	redstone()
	button.draw()
	print("Right A pressed")
end

function Dknop()
	dstate = button.getState("Dbutton")
	if dstate == false then
		button.setState("Abutton", true)
		button.setState("Bbutton", true)
		button.setState("Cbutton", true)
		button.setState("Ebutton", true)
	end
	redstone()
	button.draw()
	print("Right B pressed")
end

function Eknop()
	estate = button.getState("Ebutton")
	if estate == false then
		button.setState("Abutton", true)
		button.setState("Bbutton", true)
		button.setState("Cbutton", true)
		button.setState("Dbutton", true)
	end
	redstone()
	button.draw()
	print("AE portal pressed")
end

-- Making the button for the monitor + executing state function.
function knoppen()
	-- A Button
	button.add("Abutton", "Left A", "toggle", 2, 2, 9, 4, colors.red, colors.lime, colors.white, Aknop)
	button.setState("Abutton", true)
	--button.flashtime(Atime)
	
	-- B button
	button.add("Bbutton", "Left B", "toggle", 2, 6, 9, 8, colors.red, colors.lime, colors.white, Bknop)
	button.setState("Bbutton", true)
	
	-- C button
	button.add("Cbutton", "Right A", "toggle", 2, 10, 10, 12, colors.red, colors.lime, colors.white, Cknop)
	button.setState("Cbutton", true)
	
	-- D button
	button.add("Dbutton", "Right B", "toggle", 2, 14, 10, 16, colors.red, colors.lime, colors.white, Dknop)
	button.setState("Dbutton", true)
	
	-- AE button
	button.add("Ebutton", "AE Portal", "toggle", 13, 2, 23, 4, colors.red, colors.lime, colors.white, Eknop)
	button.setState("Ebutton", true)

	button.draw()
end

knoppen()

while true do
	button.check()
end