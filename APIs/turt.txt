-- Version Information
-- Turtle API
apiVersion = "0.182"

function version()
  return apiVersion
end

local turth = 1

-- Turtle item (full) detection, when farmMode is true. not fuel slot(16).
function turtfull()
	print("Checking if turtle is full and drop all items. not fuel slot(16).")
	a = turtle.getItemcount(1) b = turtle.getItemcount(2) c = turtle.getItemcount(3) d = turtle.getItemcount(4)
	e = turtle.getItemcount(5) f = turtle.getItemcount(6) g = turtle.getItemcount(7) h = turtle.getItemcount(8)
	i = turtle.getItemcount(9) j = turtle.getItemcount(10) k = turtle.getItemcount(11) l = turtle.getItemcount(12)
	m = turtle.getItemcount(13) n = turtle.getItemcount(14) o = turtle.getItemcount(15)
	if a and b and c and d and e and f and g and h and i and j and k and l and m and n and o and p == 64 then
		turtle.select(1) turtle.drop() turtle.select(2) turtle.drop() turtle.select(3) turtle.drop() turtle.select(4) turtle.drop()
		turtle.select(5) turtle.drop() turtle.select(6) turtle.drop() turtle.select(7) turtle.drop() turtle.select(8) turtle.drop()
		turtle.select(9) turtle.drop() turtle.select(10) turtle.drop() turtle.select(11) turtle.drop() turtle.select(12) turtle.drop()
		turtle.select(13) turtle.drop() turtle.select(14) turtle.drop() turtle.select(15) turtle.drop()
	end
	turtle.select(1)
	sleep(1)
end

-- Turtle drop all but fuel slot function. not fuel slot(16).
function dropall()
	print("Drop all items. nt fuel slot(16).")
	turtle.select(1) turtle.drop() turtle.select(2) turtle.drop() turtle.select(3) turtle.drop() turtle.select(4) turtle.drop()
	turtle.select(5) turtle.drop() turtle.select(6) turtle.drop() turtle.select(7) turtle.drop() turtle.select(8) turtle.drop()
	turtle.select(9) turtle.drop() turtle.select(10) turtle.drop() turtle.select(11) turtle.drop() turtle.select(12) turtle.drop()
	turtle.select(13) turtle.drop() turtle.select(14) turtle.drop() turtle.select(15) turtle.drop()
	turtle.select(1)
	sleep(1)
end

-- Needs a chest below it.
function refuel()
	print("refueling.")
	items = turtle.getItemCount(16)
	turtle.select(16)
	if items == 0 then
		print("Looking for chest below me")
		turtle.suckDown()
		turtle.refuel()
		turtle.select(1)
	else
		turtle.refuel()
		turtle.select(1)
	end
	print("Refueling done")
	sleep(1)
end

-- Will return the fuel lvl to indicate if it has to refuel
function fuellvl()
	print("Check fuel lvl")
	fuellvl = turtle.getFuelLevel()
	if fuellvl < 100 then
		refuel()
	end
	print("Fuel lvl: "..fuellvl.."")
	sleep(1.2)
	term.clear()
	term.setCursorPos(1, 1)
	print("Resuming last command")
	sleep(1.2)
end
		

-- Turtle movements.
function move(direction)
	if string.lower(direction) == "down" then
		if turtle.detectDown() then
			turtle.digDown()
		end
		while not turtle.down() do
			turtle.digDown()
			sleep(1)
		end
	end
	
	if string.lower(direction) == "forward" then
		if turtle.detect() then
			turtle.dig()
		end
		while not turtle.forward() do
			turtle.dig()
			sleep(1)
		end
	end
	
	if string.lower(direction) == "up" then
		if turtle.detectUp() then
			turtle.digUp()
		end
		while not turtle.up() do
			turtle.digUp()
			sleep(1)
		end
	end
	
	if string.lower(direction) == "left" then
		turtle.turnLeft()
	end
	
	if string.lower(direction) == "right" then
		turtle.turnRight()
	end
	
	-- Removing 1 by 1 pilar
	if string.lower(direction) == "pilar" then
		print("Removing pilar")
		steps = 1
		move("forward")
		while turtle.detectUp() do
			move("up")
			steps = steps + 1
		end
		while steps > 1 do
			move("down")
			steps = steps - 1
		end
		print("Pilar removed")
		sleep(1)
	end
end

function area(length, width, hight)
	if length < 31 and width < 31 and hight < 31 then
		start = true
	else
		start = false
	end
	if start == true then
		print("Clearing area Length: "..length.." \nWidth: "..width.." Higth: "..hight..".")
		while turth <= hight do
			bump = false
			for w=1, width do
				for l=1, length do
					if l~=length then
						move("forward")
					end
				end
				if w~=width then
					if not bump then
						move("left")
						move("forward")
					else
						move("right")
						move("forward")
					end
					if bump then
						move("right")
					else
						move("left")
					end
					bump = not bump
				end
			end
			-- return
			if width == 2 or width == 4 or width == 6 or width == 8 or width == 10 or width == 12 or width == 14 or width == 16 or width == 18 or width == 20 or width == 22 or width == 24
				or width == 26 or width == 28 or width == 30 then
				if not bump then
					move("left")
					move("forward")
					move("left")
					for i=1, length do
						if i~=length then
							move("forward")
						end
					end
				end
				move("left")
				if width == 1 then
					move("forward")
				else
					for i=1, width - 1 do
						move("forward")
					end
					if not bump then
						move("forward")
					end
				end
				move("left")
				if turth < hight then
					move("up")
				end
				turth = turth +1
			elseif width == 1 or width == 3 or width == 5 or width == 7 or width == 9 or width == 11 or width == 13 or width == 15 or width == 17 or width == 19 or width == 21 or width == 23 or width == 25
				or width == 27 or width == 29 then
				width = width -2
				if not bump then
					move("right")
					move("forward")
					move("right")
					for i=1, length do
						if i~=length then
							move("forward")
						end
					end
				end
				move("left")
				if width == 1 then
					move("forward")
				else
					for i=1, width - 1 do
						move("forward")
					end
					if not bump then
						move("forward")
					end
				end
				move("left")
				if turth < hight then
					move("up")
				end
				turth = turth +1
				width = width +2
			end	
		end
		if turth > hight then	
			while turth > 2 do
				move("down")
				turth = turth -1
			end
			turth = 1
		end
		print("Area cleared.")
	else
		print("Current Length: "..length.." Width: "..width.." \nHigth: "..hight..".")
		if length >30 then
			print("Length is to high max is 30")
		elseif width >30 then
			print("Width is to high max is 30")
		elseif hight >20 then
			print("Higth is to high max is 30")
		end
		print("Max area is Length:30 X Width:30 X Hight:30")
	end
end